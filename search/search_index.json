{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"structure/","text":"\u6211\u4eec\u4f7f\u7528data structure\u6765\u4fdd\u5b58\u6570\u636e\uff0c\u90a3\u4e48\u662f\u5426\u60f3\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u6570\u636e\u6709\u54ea\u4e9b\u7ed3\u6784\u5462\uff1f\u663e\u7136\uff0c\u5bf9\u7ed3\u6784\u7684\u7814\u7a76\u6709\u52a9\u4e8e\u6211\u4eec\u9009\u62e9\u5408\u9002\u7684data structure\u6765\u4fdd\u5b58\u6211\u4eec\u7684\u6570\u636e\uff0c\u5e76\u4e14\u53ea\u6709\u5f53\u6211\u4eec\u77e5\u9053\u4e8b\u7269\u7ed3\u6784\u540e\uff0c\u624d\u80fd\u591f\u4f7f\u7528\u8ba1\u7b97\u673a\u6765\u5904\u7406\u5b83\u3002structure\u662f\u4e00\u4e2a\u5b8f\u5927\u7684\u8bdd\u9898\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4ec5\u4ec5\u4ece computer science \u7684\u89d2\u5ea6\u6765\u63a2\u8ba8structure. hierarchical \uf0c1 Hierarchical structure is common in computer science. directory Hierarchical structure and recursion \uf0c1 structure of sentence \uf0c1 In linguistics , syntax is the set of rules, principles, and processes that govern the structure of sentences ( sentence structure ) in a given language , usually including word order . The term syntax is also used to refer to the study of such principles and processes.[ 3] The goal of many syntacticians is to discover the syntactic rules common to all languages. Studies of the syntactical aspects of languages(their internal structural patterns ) belongs to the theory of formal language . In theory of formal language, formal grammar is used to describe structure of sentences , that is syntax . Formal grammar such as a regular grammar or context-free grammar , consists of its formation rules . The first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form (known as its parse tree in computer science, and as its deep structure in generative grammar ). Parse tree is used in compiler, which reveal to us that tree can be used to describe the structure of sentences that is syntax and formal grammar can be convert to tree .","title":"structure"},{"location":"structure/#hierarchical","text":"Hierarchical structure is common in computer science. directory","title":"hierarchical"},{"location":"structure/#hierarchical-structure-and-recursion","text":"","title":"Hierarchical structure and recursion"},{"location":"structure/#structure-of-sentence","text":"In linguistics , syntax is the set of rules, principles, and processes that govern the structure of sentences ( sentence structure ) in a given language , usually including word order . The term syntax is also used to refer to the study of such principles and processes.[ 3] The goal of many syntacticians is to discover the syntactic rules common to all languages. Studies of the syntactical aspects of languages(their internal structural patterns ) belongs to the theory of formal language . In theory of formal language, formal grammar is used to describe structure of sentences , that is syntax . Formal grammar such as a regular grammar or context-free grammar , consists of its formation rules . The first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form (known as its parse tree in computer science, and as its deep structure in generative grammar ). Parse tree is used in compiler, which reveal to us that tree can be used to describe the structure of sentences that is syntax and formal grammar can be convert to tree .","title":"structure of sentence"},{"location":"wikipedia-Data-structure/","text":"Data structure \uf0c1 A data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values , the relationships among them, and the functions or operations that can be applied to the data. NOTE: efficient can be measured by time complexity and space complexity . Data structure VS abstract data types (ADT) \uf0c1 Data structures serve as the basis for abstract data types (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the data type. NOTE: This can be thought as separating interface and implementation, ADT is interface and concrete data structure is implementation. Usage \uf0c1 Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, relational databases commonly use B-tree indexes for data retrieval, while compiler implementations usually use hash tables to look up identifiers. NOTE: So how to choose data structure ? It is an art and worth learning. Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services . Usually, efficient data structures are key to designing efficient algorithms . Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both main memory and secondary memory .","title":"Home"},{"location":"wikipedia-Data-structure/#data-structure","text":"A data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values , the relationships among them, and the functions or operations that can be applied to the data. NOTE: efficient can be measured by time complexity and space complexity .","title":"Data structure"},{"location":"wikipedia-Data-structure/#data-structure-vs-abstract-data-types-adt","text":"Data structures serve as the basis for abstract data types (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the data type. NOTE: This can be thought as separating interface and implementation, ADT is interface and concrete data structure is implementation.","title":"Data structure VS abstract data types (ADT)"},{"location":"wikipedia-Data-structure/#usage","text":"Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, relational databases commonly use B-tree indexes for data retrieval, while compiler implementations usually use hash tables to look up identifiers. NOTE: So how to choose data structure ? It is an art and worth learning. Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services . Usually, efficient data structures are key to designing efficient algorithms . Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both main memory and secondary memory .","title":"Usage"},{"location":"ADT/wikipedia-Abstract-data-type/","text":"","title":"wikipedia-Abstract-data-type"},{"location":"data-structure/tree/application-of-tree/","text":"Uses of tree data structure Representing hierarchical data Tree in formal language and compiler design Uses of tree data structure \uf0c1 Representing hierarchical data \uf0c1 \u5177\u6709 hierarchical \u7ed3\u6784\u7684\u6570\u636e\u5728\u6211\u4eec\u8eab\u8fb9\u5e7f\u6cdb\u5b58\u5728\uff0c\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e00\u4e9b\uff1a directory Tree in formal language and compiler design \uf0c1 If you have read book describe the compiler technology , for example the classic definitive book Compilers: Principles, Techniques, and Tools by Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman, you will be aware how important the tree structure is to the compiler. As described in chapter 2.2.3 Parse Trees: Tree data structures figure prominently in compiling. There are some many tree in the book, such as Parse tree , abstract syntax tree , activation tree(in chapter 7.2.1 Activation Trees), expression tree . Essentially Speaking, a programming language is a formal language , what have been concluded in article structure is that Tree can be used to describe the structure of sentences that is syntax and formal grammar can be convert to tree . So it's natural to use trees in the compiling.","title":"application-of-tree"},{"location":"data-structure/tree/application-of-tree/#uses-of-tree-data-structure","text":"","title":"Uses of tree data structure"},{"location":"data-structure/tree/application-of-tree/#representing-hierarchical-data","text":"\u5177\u6709 hierarchical \u7ed3\u6784\u7684\u6570\u636e\u5728\u6211\u4eec\u8eab\u8fb9\u5e7f\u6cdb\u5b58\u5728\uff0c\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e00\u4e9b\uff1a directory","title":"Representing hierarchical data"},{"location":"data-structure/tree/application-of-tree/#tree-in-formal-language-and-compiler-design","text":"If you have read book describe the compiler technology , for example the classic definitive book Compilers: Principles, Techniques, and Tools by Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman, you will be aware how important the tree structure is to the compiler. As described in chapter 2.2.3 Parse Trees: Tree data structures figure prominently in compiling. There are some many tree in the book, such as Parse tree , abstract syntax tree , activation tree(in chapter 7.2.1 Activation Trees), expression tree . Essentially Speaking, a programming language is a formal language , what have been concluded in article structure is that Tree can be used to describe the structure of sentences that is syntax and formal grammar can be convert to tree . So it's natural to use trees in the compiling.","title":"Tree in formal language and compiler design"},{"location":"data-structure/tree/tree-and-recursion/","text":"","title":"tree-and-recursion"},{"location":"data-structure/tree/tree-and-stack/","text":"","title":"tree-and-stack"}]}